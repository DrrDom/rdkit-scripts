#!/usr/bin/env python3
# author          : Aleksandra Nikonenko
# date            : 17.05.2021
# license         : BSD-3
# ==============================================================================

__author__ = 'aleksandra'

import argparse
import os
import subprocess
from io import BytesIO
from multiprocessing import Pool, cpu_count

from rdkit import Chem
from rdkit.Chem import AllChem

import read_input

cmd_run = "cxcalc majormicrospecies -H {pH} -f {out_format} -M -K '{fname}'"


def convert2pdb(m, name, outpath, preserve_coord):
    if not m:
        print('Incorrect molecule:', name)
        return None

    m = Chem.AddHs(m, addCoords=True)
    if not preserve_coord:
        AllChem.EmbedMolecule(m, AllChem.ETKDG())
        AllChem.UFFOptimizeMolecule(m, maxIters=100)

    pdb = Chem.MolToPDBBlock(m)
    with open(os.path.join(outpath, name + '.pdb'), 'w') as data:
        data.write(pdb)


def convertsdf2pdb(args):
    convert2pdb(*args)


def main(fname, outpath, ncpu, field, pH, preserve_coord, save_sdf):
    if outpath and not os.path.exists(outpath):
        os.mkdir(outpath)

    sdf_pHprotonate = subprocess.check_output(cmd_run.format(fname=fname,
                                                             out_format='sdf', pH=pH), shell=True)
    if save_sdf is not None:
        with open(save_sdf, 'w') as out_sdf:
            out_sdf.write(sdf_pHprotonate.decode())

    if ncpu > 1:
        p = Pool(max(1, min(ncpu, cpu_count())))
        p.map(convertsdf2pdb, [(i, j[1], outpath, preserve_coord) for i, j in
                               zip(Chem.ForwardSDMolSupplier(BytesIO(sdf_pHprotonate), sanitize=True),
                                   read_input.read_input(
                                       fname,
                                       input_format=None,
                                       id_field_name=field,
                                       sanitize=False))])
    else:
        list(
            map(convertsdf2pdb, [(i, j[1], outpath, preserve_coord) for i, j in
                                 zip(Chem.ForwardSDMolSupplier(BytesIO(sdf_pHprotonate), sanitize=True),
                                     read_input.read_input(
                                         fname,
                                         input_format=None,
                                         id_field_name=field,
                                         sanitize=False))]))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='''Conversion of input file to separate pdb files. Conformer generation is performed by RDKit. '
                                                 Major tautomeric form at the given pH is generated by ChemAxon.''')
    parser.add_argument('-i', '--input', metavar='FILENAME', required=True,
                        help='input file with compounds. Supported formats: SMILES (*.smi) or SDF (*.sdf). '
                             'Note: For SDF format always use the neutral form of molecules.')
    parser.add_argument('-f', '--field_name', metavar='STRING', required=False, default=None,
                        help='Is used only if input format is *.sdf.'
                             ' Name of the field containing molecule name, if None molecule title will be taken.')
    parser.add_argument('-o', '--output', metavar='DIRNAME', required=False, default=None,
                        help='output path. If None save to current directory.')
    parser.add_argument('--pH', metavar='FLOAT', required=False, default=7.4,
                        help='To get major tautomer at this pH value.')
    parser.add_argument('--save_sdf', metavar='FILENAME', default=None,
                        help='Output filename to save major tautomer at given pH in SDF format. Saving without hydrogens.')
    parser.add_argument('--preserve_coord', action='store_true', default=False,
                        help='Preserve previous coordinates. This argument is used only for input SDF format.')
    parser.add_argument('-n', '--ncpu', metavar='INTEGER', required=False, default=1, type=int,
                        help='number of CPUs to use for computation.')
    args = parser.parse_args()

    if args.preserve_coord and args.input.split('.')[-1].lower() != 'sdf':
        raise ValueError('Please use --preserve_coord argument only for input SDF format.')

    main(args.input, args.output if args.output is not None else os.getcwd(), args.ncpu, args.field_name, args.pH,
         args.preserve_coord, args.save_sdf)
